#include "potential.h"

//Bond lengths///////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double a260_a260_energy ( double r )
{
	double res;

	res = k_a260_a260 * (r - r_a260_a260) * (r - r_a260_a260);

	return ( res );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double a260_a260_force ( double r )
{
	double res;

	res = 2.0 * k_a260_a260 * (r_a260_a260 - r);

	return ( res );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double OW_HW_energy ( double r )
{
	double res;

	res = k_OW_HW * (r - r_OW_HW) * (r - r_OW_HW);

	return ( res );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double OW_HW_force ( double r )
{
	double res;

	res = 2.0 * k_OW_HW * (r_OW_HW - r);

	return ( res );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double C_N_energy ( double r )
{
	double res;

	res = k_C_N * (r - r_C_N) * (r - r_C_N);

	return ( res );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double C_N_force ( double r )
{
	double res;

	res = 2.0 * k_C_N * (r_C_N - r);

	return ( res );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double C_O_energy ( double r )
{
	double res;

	res = k_C_O * (r - r_C_O) * (r - r_C_O);

	return ( res );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double C_O_force ( double r )
{
	double res;

	res = 2.0 * k_C_O * (r_C_O - r);

	return ( res );
}

//Valence angles/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double a260_a260_a260_energy ( double theta )
{
	double res;

	res = k_a260_a260_a260 * (theta - theta_a260_a260_a260) * (theta - theta_a260_a260_a260);

	return ( res );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double a260_a260_a260_force ( double theta )
{
	double res;

	res = 2.0 * k_a260_a260_a260 * (theta_a260_a260_a260 - theta);

	return ( res );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double HW_OW_HW_energy ( double theta )
{
	double res;

	res = k_HW_OW_HW * (theta - theta_HW_OW_HW) * (theta - theta_HW_OW_HW);

	return ( res );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double HW_OW_HW_force ( double theta )
{
	double res;

	res = 2.0 * k_HW_OW_HW * (theta_HW_OW_HW - theta);

	return ( res );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double C_N_CT_energy ( double theta )
{
	double res;

	res = k_C_N_CT * (theta - theta_C_N_CT) * (theta - theta_C_N_CT);

	return ( res );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double C_N_CT_force ( double theta )
{
	double res;

	res = 2.0 * k_C_N_CT * (theta_C_N_CT - theta);

	return ( res );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double CT_C_N_energy ( double theta )
{
	double res;

	res = k_CT_C_N * (theta - theta_CT_C_N) * (theta - theta_CT_C_N);

	return ( res );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double CT_C_N_force ( double theta )
{
	double res;

	res = 2.0 * k_CT_C_N * (theta_CT_C_N - theta);

	return ( res );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double CT_C_O_energy ( double theta )
{
	double res;

	res = k_CT_C_O * (theta - theta_CT_C_O) * (theta - theta_CT_C_O);

	return ( res );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double CT_C_O_force ( double theta )
{
	double res;

	res = 2.0 * k_CT_C_O * (theta_CT_C_O - theta);

	return ( res );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double N_C_O_energy ( double theta )
{
	double res;

	res = k_N_C_O * (theta - theta_N_C_O) * (theta - theta_N_C_O);

	return ( res );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double N_C_O_force ( double theta )
{
	double res;

	res = 2.0 * k_N_C_O * (theta_N_C_O - theta);

	return ( res );
}

//w dihedral angles//////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double X2_N_C_X2_energy ( double phi )
{
	double res;

	res = 10.0 * ( 1 + cos ( 2.0 * phi - pi ) ) + 2.0 * ( 1 + cos ( phi ) );

	return ( res );
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double X2_N_C_X2_force ( double phi )
{
	double res;

	res = -20.0 * sin ( 2.0 * phi ) + 2.0 * sin ( phi );

	return ( res );
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double X2_C_N_X_energy ( double phi )
{
	double res;

	res = 5.0 * ( 1 + cos ( 2.0 * phi - pi ) );

	return ( res );
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double X2_C_N_X_force ( double phi )
{
	double res;

	res = -10.0 * sin ( 2.0 * phi );

	return ( res );
}
